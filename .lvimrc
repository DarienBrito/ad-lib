if exists('s:guard') == 0 " guard

let s:guard = 1
let s:thispath = expand('<sfile>:p:h')
let s:file = '.tags'

set tags=.tags;/

function s:sys(cmd)
  let pref = 'cd ' . s:thispath . '; '
  let postf = '; cd -'

  call system(pref . a:cmd . postf)
  "echo a:cmd
endfunction

function AL_make(what)
  execute 'make -C' . s:thispath . '/. ' . a:what
endfunction

function AL_update_tags()
  let filefull = expand('%:p')
  if match(filefull, s:thispath) != 0
    return
  endif

    let file = substitute(filefull, s:thispath . '/', '', '')
    let efile = escape(file, './')

    let cmd = 'sed -i "/' . efile . '/d" tags'
    call s:sys(cmd)

    let cmd = 'ctags -f ' . s:file . ' -a "' . file . '"'
    call s:sys(cmd)
endfunction

function AL_do_tags()
  if filereadable(s:file) == 0
    let cmd = 'ctags -f ' . s:file . ' -R code lua'
    call s:sys(cmd)
  endif
endfunction

call AL_do_tags()
autocmd BufWritePost *.h,*.c,*.lua call AL_update_tags()
autocmd FileChangedShell *.h,*.c,*.lua call AL_update_tags()

map <F13> :call AL_make('run')<CR>
map <S-F13> :call AL_make('debug')<CR>

endif " end of guard
