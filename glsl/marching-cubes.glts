#pragma kinds VGF
#pragma include mc-noise

#ifdef GS
/* How many tris to generate for each case */
int counts [256] = int[] (
	0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,2,1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,
	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,2,3,4,4,3,3,4,4,3,4,5,5,2,
	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,
	2,3,3,4,3,4,2,3,3,4,4,5,4,5,3,2,3,4,4,3,4,5,3,2,4,5,5,4,5,2,4,1,
	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,3,3,4,3,4,4,5,3,2,4,3,4,3,5,2,
	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,3,4,4,3,4,5,5,4,4,3,5,2,5,4,2,1,
	2,3,3,4,3,4,4,5,3,4,4,5,2,3,3,2,3,4,4,5,4,5,5,2,4,3,5,4,3,2,4,1,
	3,4,4,5,4,5,3,4,4,5,5,2,3,4,2,1,2,3,3,2,3,4,2,1,3,2,4,1,2,1,1,0
);
#endif

uniform vec3 vol0;
uniform vec3 vol1;
uniform ivec3 grid;
uniform isamplerBuffer edges;

#ifdef GS
out vec4 position;
out vec3 colour;
#elif defined FS
in vec3 colour;
#endif

#if defined VS
void main(void) {}
#elif defined GS
layout(points) in;
layout(triangle_strip, max_vertices = 15) out;

void main() {
	/* Grid: 0 .. 2U, 0 .. 2V, 0 .. 2W correspond to vol0 .. vol1 in space
	   N = U * V * W
	   Square centers are at odd uvw's
	   Square edges are along even uvw's
	 */
	int N1 = gl_PrimitiveIDIn;
	int N2 = N1 / grid.x;
	int N3 = N2 / grid.y;
	ivec3 uvw = 1 + 2 * ivec3 (N1 % grid.x, N2 % grid.y, N3);
	vec3 scale = 1.0 / (2 * grid);
	vec3 delta = scale * (vol1 - vol0);

	vec3 c = vol0 + uvw * delta;
	vec3 dx = vec3 (delta.x, 0, 0);
	vec3 dy = vec3 (0, delta.y, 0);
	vec3 dz = vec3 (0, 0, delta.z);

	vec3 pos [8] = vec3 [] (c-dx-dy-dz, c-dx+dy-dz, c+dx+dy-dz, c+dx-dy-dz,
					c-dx-dy+dz, c-dx+dy+dz, c+dx+dy+dz, c+dx-dy+dz);

	float f [8] = float []
		(fun (pos[0]), fun (pos[1]), fun (pos[2]), fun (pos[3]),
	     fun (pos[4]), fun (pos[5]), fun (pos[6]), fun (pos[7]));

	vec3 edge [12];
	edge[ 0] = (pos[1] * f[0] - pos[0] * f[1]) / (f[0] - f[1]);
	edge[ 1] = (pos[2] * f[1] - pos[1] * f[2]) / (f[1] - f[2]);
	edge[ 2] = (pos[2] * f[3] - pos[3] * f[2]) / (f[3] - f[2]);
	edge[ 3] = (pos[3] * f[0] - pos[0] * f[3]) / (f[0] - f[3]);
	edge[ 4] = (pos[5] * f[4] - pos[4] * f[5]) / (f[4] - f[5]);
	edge[ 5] = (pos[6] * f[5] - pos[5] * f[6]) / (f[5] - f[6]);
	edge[ 6] = (pos[6] * f[7] - pos[7] * f[6]) / (f[7] - f[6]);
	edge[ 7] = (pos[7] * f[4] - pos[4] * f[7]) / (f[4] - f[7]);
	edge[ 8] = (pos[4] * f[0] - pos[0] * f[4]) / (f[0] - f[4]);
	edge[ 9] = (pos[5] * f[1] - pos[1] * f[5]) / (f[1] - f[5]);
	edge[10] = (pos[6] * f[2] - pos[2] * f[6]) / (f[2] - f[6]);
	edge[11] = (pos[7] * f[3] - pos[3] * f[7]) / (f[3] - f[7]);

	/* Which case? */
	int C = (f[0]>0?1:0) + (f[1]>0?2:0) + (f[2]>0?4:0) + (f[3]>0?8:0) +
	        (f[4]>0?16:0) + (f[5]>0?32:0) + (f[6]>0?64:0) + (f[7]>0?128:0);

	for (int p = 0; p < counts [C]; ++p) {
		ivec4 indices = texelFetch (edges, C*5 + p);
		vec3 e0 = edge[indices[0]];
		vec3 e1 = edge[indices[1]];
		vec3 e2 = edge[indices[2]];
		vec3 normal = normalize (cross (e0 - e1, e1 - e2));
		vec3 kase = vec3(indices.xyz / 11.0);
		for(int v = 0; v < 3; v++) {
			position = gl_Position = vec4 (edge[indices[v]],1);
			colour = normal * 0.5 + 0.5;
			EmitVertex();
		}
		EndPrimitive();
	}
}
#elif defined FS
out vec4 out_colour;
void main(void) {
	out_colour = vec4 (colour, 1);
}
#endif

