#pragma kinds VGF

uniform vec2 vol0 = vec2 (0, 0);
uniform vec2 vol1 = vec2 (1, 1);
uniform ivec2 grid;

uniform mat4 Umvp;
uniform float time;

varying float Vid;

#if defined VS
void main(void) {}
#elif defined GS
layout(points) in;
layout(triangle_strip, max_vertices = 9) out;

/* How many tris to generate for each case */
int counts [16] = {
	0, 1, 1, 2,
	1, 2, 2, 3,
    1, 2, 2, 3,
	2, 3, 3, 2
};

/* Indices of tri vertices for each case.
	8 means none. For 0-7, see explanation of positions below
*/
ivec3 indices [16] [3] = {
	{{8, 8, 8}, {8, 8, 8}, {8, 8, 8}},
	{{0, 4, 5}, {8, 8, 8}, {8, 8, 8}},
	{{1, 4, 6}, {8, 8, 8}, {8, 8, 8}},
	{{0, 1, 6}, {0, 5, 6}, {8, 8, 8}},

	{{2, 5, 7}, {8, 8, 8}, {8, 8, 8}},
	{{0, 4, 2}, {4, 2, 7}, {8, 8, 8}},
	{{2, 5, 7}, {1, 4, 6}, {8, 8, 8}},
	{{0, 2, 7}, {0, 7, 6}, {0, 6, 1}},

	{{3, 7, 6}, {8, 8, 8}, {8, 8, 8}},
	{{0, 4, 5}, {3, 7, 6}, {8, 8, 8}},
	{{4, 1, 7}, {1, 7, 3}, {8, 8, 8}},
	{{0, 5, 7}, {0, 7, 3}, {0, 3, 1}},

	{{5, 6, 2}, {2, 6, 3}, {8, 8, 8}},
	{{0, 2, 3}, {0, 3, 6}, {0, 6, 4}},
	{{2, 1, 3}, {2, 5, 4}, {2, 1, 4}},
	{{0, 1, 2}, {1, 2, 3}, {8, 8, 8}},
};

#define M_PI 3.1415926535897932384626433832795
float fun (vec2 pos) {
	pos = pos - 0.5;
	return sin (pow(2,10+time*0.01)*dot (pos, pos));
	float a = time;
	return dot(pos - 0.5, vec2(sin(a), cos(a)));
}

void main() {
	/* Grid: 0 .. 2U, 0 .. 2V, corresponds to vol0 .. vol1 in space
	   N = U * V
	   Square centers are at odd u's and v's
	   Square edges are along even u's and v's
	 */
	int N = gl_PrimitiveIDIn;
	ivec2 uv = 1 + 2 * ivec2 (N % grid.x, (N / grid.x) % grid.y);
	vec2 scale = 1.0 / (2 * grid);
	vec2 delta = scale * (vol1 - vol0);

	vec2 c = vol0 + uv * delta;
	vec2 dx = vec2 (delta.x, 0);
	vec2 dy = vec2 (0, delta.y);

	/* First 4 positions are the square vertices:
	   top-left, top-right, b-left, b-right
	   Function is evaluated in those
	*/
	vec2 pos [8] = {c - dx - dy, c + dx - dy, c - dx + dy, c + dx + dy};
	float f [4] = {fun (pos[0]), fun (pos[1]), fun (pos[2]), fun (pos[3])};

	/* Next 4 positions are interpolated zero-points of the function:
	   top, left, right, bottom edges.
	*/
	pos[4] = (pos[1] * f[0] - pos[0] * f[1]) / (f[0] - f[1]);
	pos[5] = (pos[2] * f[0] - pos[0] * f[2]) / (f[0] - f[2]);
	pos[6] = (pos[3] * f[1] - pos[1] * f[3]) / (f[1] - f[3]);
	pos[7] = (pos[3] * f[2] - pos[2] * f[3]) / (f[2] - f[3]);

	/* Which case? */
	int C = (f[0]>0?1:0) + (f[1]>0?2:0) + (f[2]>0?4:0) + (f[3]>0?8:0);

	for (int p = 0; p < counts [C]; ++p) {
		for(int v = 0; v < 3; v++) {
			gl_Position = Umvp * vec4 (pos[indices[C][p][v]], 0, 1);
			Vid = C;
			EmitVertex();
		}
		EndPrimitive();
	}
}
#elif defined FS
void main(void) {
	gl_FragColor = vec4 (vec2 (0.5+0.5*sin(Vid*100/16)), 1, 0.5);
}
#endif

